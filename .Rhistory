iconv('row aa dd', "latin1", "ASCII", sub="")
iconv('row aa dd 1', "latin1", "ASCII", sub="")
?iconv
dataset$Text1 <- sapply(dataset$Text,function(row) iconv(row, "latin1", "ASCII", sub=""))
View(dataset)
View(dataset)
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_92272126-3338-4f30-9453-a0fc1381ad81/REditorWrapper.R')
View(dataset)
View(dataset)
(dataset$Text == dataset$Text1)
class(dataset$Text)
class(dataset$Text1)
?iconv
dataset$Text <- sapply(dataset$Text,function(row) iconv(row, "", "", sub=""))
corpus = Corpus(VectorSource(dataset))
cleanCorpus = clean_corpus(corpus)
blues <- brewer.pal(9, "Blues")
blues = blues [-(1:3)]
wordcloud(cleanCorpus, max.words = 50, colors = blues, scale=c(5,0.5), rot.per=0.35, use.r.layout=FALSE)
require("NLP")
require("tm")
require("RColorBrewer")
require("wordcloud")
library(NLP)
library(tm)
library(RColorBrewer)
library(wordcloud)
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeWords, c(stopwords("english"), "taco"))
return(corpus)
}
#dataset$Text1 <- sapply(dataset$Text,function(row) iconv(row, "latin1", "ASCII", sub=""))
dataset$Text <- sapply(dataset$Text,function(row) iconv(row, "", "", sub=""))
corpus = Corpus(VectorSource(dataset))
cleanCorpus = clean_corpus(corpus)
blues <- brewer.pal(9, "Blues")
blues = blues [-(1:3)]
wordcloud(cleanCorpus, max.words = 50, colors = blues, scale=c(5,0.5), rot.per=0.35, use.r.layout=FALSE)
install.packages("forecast")
install.packages("SparkR")
'c:\Program Files\spark-2.2.0-bin-hadoop2.7\'
Sys.setenv(SPARK_HOME = "c:/Program Files/spark-2.2.0-bin-hadoop2.7/")
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
2
sparkR.session()
rdf = data.frame(a =1, b = 10)
DF = createDataFrame(rdf)
0.25^3
0.25^4*30000
30000*0.25
30000*0.25^2
30000*0.25^3
30000*0.25^4
30000*0.25^5
install.packages("SnowballC")
iris
D = iris
View(D)
D = iris3
D = iris
dataset = data.frame(ID = c(1,2,3,4,5,6),X = c(1,1,1,3,3,3))
fit <- lm(X ~ ID, data = dataset)
fitted(fit)
fit
dataset$X1 = fitted(fit)
dataset
debugSource('C:/Users/boefraty/projects/PBI/R/AML/tit1.R')
debugSource('C:/Users/boefraty/projects/PBI/R/AML/tit1.R')
storage_account_name
storage_account_key
"DefaultEndpointsProtocol=https;AccountName=" + storage_account_name + ";AccountKey=" + storage_account_key
debugSource('C:/Users/boefraty/projects/PBI/R/AML/tit1.R')
connection_string
result
?azureGetBlob
??azureGetBlob
install.packages("AzureSMR")
library("AzureSMR")
A = read.csv(url("https://storageboefraty.blob.core.windows.net/mycontainerpublic/output1results.csv"))
View(A)
source('C:/Users/boefraty/projects/PBI/R/AML/tit1.R')
A = read.csv(url("https://storageboefraty.blob.core.windows.net/mycontainerpublic/output1results.csv"))
library("RODBC")
install.packages("RODBC")
source('C:/Users/boefraty/projects/PBI/R/AML/BatchRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
print(fromJSON(result))
A = fromJSON(result)
A$Results$output1
A$Results$output1$type
A$Results$output1$value
A$Results$output1$value[[1]]
A$Results$output1$value[[2]]
A$Results$output1$value[[3]]
A$Results$output1$value[[3]][[1]]
A$Results$output1$value[[3]][[2]]
A$Results$output1$value[[3]]
A$Results$output1$value[[2]]
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/OneRequest.R')
source('C:/Users/boefraty/projects/PBI/R/AML/BatchRequest.R')
View(OutputTitanic)
debugSource('C:/Users/boefraty/projects/PBI/R/AML/BatchRequest.R')
blobUrl
fc
ls
dir()
getwd()
libraryRequireInstall = function(packageName, ...)
{
if(!require(packageName, character.only = TRUE))
warning(paste("*** The package: '", packageName, "' was not installed ***",sep=""))
}
#Remark: most of the packages are required because of several automatic cluster number algorithms
libraryRequireInstall("nloptr")
libraryRequireInstall("seriation")
libraryRequireInstall("NbClust")
libraryRequireInstall("cluster")
libraryRequireInstall("car")
libraryRequireInstall("scales")
libraryRequireInstall("fpc")
libraryRequireInstall("mclust")
libraryRequireInstall("apcluster")
libraryRequireInstall("vegan")
libraryRequireInstall("Redmonder")
?kmeans
library(mclust)
install.packages("clust")
install.packages("mclust")
?Mclust
library(mclust)
?Mclust
?kmeans
install.packages("formattable")
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
df <- data.frame(
id = 1:10,
name = c("Bob", "Ashley", "James", "David", "Jenny",
"Hans", "Leo", "John", "Emily", "Lee"),
age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
install("d3heatmap")
install.packages("d3heatmap")
library(d3heatmap)
d3heatmap(mtcars, scale = "column", colors = "Spectral")
install.packages("dygraphs")
install.packages("highcharter")
install.packages("highcharter")
install.packages("highcharter")
install.packages("highcharter")
df <- data.frame(
id = 1:10,
name = c("Bob", "Ashley", "James", "David", "Jenny",
"Hans", "Leo", "John", "Emily", "Lee"),
age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
data(data_stock_3)
amStockMultiSet(data = data_stock_3)
install.packages("rAmCharts")
library(rAmCharts)
data(data_stock_3)
amStockMultiSet(data = data_stock_3)
set.seed(42)
?scale
install.packages("rattle")
library("rattle")
install.packages("RGtk2")
library("rattle")
library(RGtk2)
library(rattle)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
rattle
rattle()
128*3.5/12
install.packages("MnClust")
install.packages("NbClust")
install.packages("redmonder")
install.packages("Redmonder")
plot(42)
source('C:/Users/boefraty/projects/PBI/R/community/FrankThomson/fromMaster/scheduleViewRHTMLCV/script.r')
?Devices
Devices
dev.cur()
plot(42)
dev.cur()
library(datasets)
data
dataset
?datasets
data()
View(AirPassengers)
npk
View(npk)
plot(presidents)
plot(presidents)
plot(presidents)
View(presidents)
Summary(presidents)
str(presidents)
class(presidents)
data()
mtcars
View(mtcars)
.libPaths()
version
package_version()
package_version("corrplot")
packageDescription("corrplot")
2 +2
a = 2
a = 2
class(a)
as.character(a)
class(a)
a = as.character(a)
class(a)
?plot
plot(a)
plot(a,a)
randn(10)
nrand(10)
?nrand
?rand
?randn
?rnorm
rnorm (10)
plot(rnorm (10))
dev.cur()
plot(rnorm (10))
dev.cur()
ls
plot(cars)
plot(cars)
library(xkcd)
library(extrafont)
library(ggplot2)
#do you have xkcd fonts?
if( "xkcd" %in% fonts()) {
p <- ggplot() +
geom_point(aes(x=mpg, y=wt), data=mtcars) +
theme(text = element_text(size = 16, family = "xkcd")) }
else
{
warning("Not xkcd fonts installed!")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars)
}
p
getwd()
loadfonts()
"xkcd" %in% fonts()
loadfonts()
"xkcd" %in% fonts()
?loadfonts
.libPaths()
font.files()
require("ggplot2")
require("xkcd")
font.files()
font_install("xkcd")
font_install("xkcd.tff")
font.files()
library(xkcd)
library(extrafont)
library(ggplot2)
fonts()
names(pdfFonts())
names(pdfFonts())
install.packages("extrafont")
library(extrafont)
font_import()
y
install.packages("extrafont")
fonts()
a = 2
for i = 1:10 a = i
for i in 1:10 {a = i}
for (i in 1:10) {a = i}
a
install.packages("forecast")
source('C:/Users/boefraty/REditorWrapper_bfd259b6-f955-41aa-a6ea-0694ab1b98d9/REditorWrapper.R')
plot(dataset)
source('C:/Users/boefraty/REditorWrapper_bfd259b6-f955-41aa-a6ea-0694ab1b98d9/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_15e94b80-9cbf-49bf-b6b9-f54398ae5a86/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_15e94b80-9cbf-49bf-b6b9-f54398ae5a86/REditorWrapper.R')
source('C:/Users/boefraty/REditorWrapper_15e94b80-9cbf-49bf-b6b9-f54398ae5a86/REditorWrapper.R')
ff = 'c:/Users/boefraty/projects/VIBR/data/temp/AutoTaggedAudio/positive/outIvan.csv'
a = read.csv(file = ff)
View(a)
a = read.csv(file = ff)
View(a)
View(a)
2000/100
2000/100*4
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
setwd('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/')
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
p
p$x
View(deleg)
p$sizingPolicy
p$x$layout
p$x$layout$margin
class(p$x$layout$margin)
p$x$layout$margin$b = 0
p
p$x$layout$margin$b = 40.13
p
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
Q
Q
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
Tooltips
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
usePointsIndexes
tempText
allColNames
orig_dataset[pi,]
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
tempText
tooltips[pi,]
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
?cbind
?intersect
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
View(tooltips)
cnt = colnames(tooltips)
a1= tooltips[,cnt]
View(a1)
View(tooltips)
cnt1 = xor(colnames(tooltips),colnames(orig_dataset))
cnt1 = setdiff(colnames(tooltips),colnames(orig_dataset))
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
cnt1 = setdiff(colnames(tooltips),colnames(orig_dataset))
cnt1
colnames(tooltips)
colnames(orig_dataset)
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
cnt1 = intersect(colnames(tooltips),colnames(orig_dataset))
tooltips[,cnt1] = NULL
View(tooltips)
cnt1
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
intersect(colnames(tooltips),colnames(orig_dataset))
tooltips[,cnt1] = NULL
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
View(tooltips)
View(tooltips)
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
View(tooltips)
ncol(tooltips)
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
intersect(c(1,2,3),c(3,4))
intersect(c(1,2,3),c(7,4))
length(intersect(c(1,2,3),c(7,4)))
ncill(NULL)
ncol(NULL)
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
a = data.frame(a1 = c("a","b","c"), a2 = c("1","2","3"))
paste(a,sep="")
paste(a,sep="", collapse = ",")
a
paste(a[,1],a[,2],sep="", collapse = ",")
paste(a[,1],a[,2],sep=",")
length(paste(a[,1],a[,2],sep=","))
?paste
sapply(a,paste)
lapply(a,paste)
lapply(a,paste, collapse = ",")
lapply(t(a),paste, collapse = ",")
sapply(a,paste, collapse = ",")
?apply(a,paste, collapse = ",")
apply(a,1,paste, collapse = ",")
a = data.frame( c("a","b","c"), c("1","2","3"))
a
apply(a,1,paste,collapse ="<br>")
install.packages("VennDiagram")
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
extraString
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
extraString
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
extraString
extraString
length(extraString)
nchar(extraString)
nchar("extraString")
nchar("")
nchar(NULL)
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
extraString
length(extraString)
nchars(extraString)
nchar(extraString)
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
nsB
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
extraString
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
debugSource('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
aa
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
source('C:/GIT_PBI/latestForks/PowerBI-visuals-clustering-kmeans-1/script.r')
aa
